#!/usr/bin/env bash

source ${HOME}/.UMBRELLA/UMBRELLA/functions || { echo -en "\033[31mError:\033[33mFile 'functions' is required but not exist!.\033[0m\n" ; exit 1; }

DISPLAY=":0"
PULSE_SERVER='127.0.0.1'
PTIME=3
E="$white[${red}✖$white]$red Error:$green"
D="$white[${green}✔$white]$green"
A="$white[${green}+$white]${green}"

dependencies=("pulseaudio" "termux-x11" "xfce4-session")
check_dependencies "${dependencies[@]}"

out() {
  local argv="$1"

  case "$argv" in
    -e) echo -e "$red[${purple}$(date '+%Y-%m-%d %H:%M:%S')$red]: $E ${green}$2${disable}"
      ;;
    *)
  echo -e "$red[${purple}$(date '+%Y-%m-%d %H:%M:%S')$red]: ${green}$argv${disable}"
  ;;
esac
}

# Kill open X11 processes
kill_processes() {
  local pids
  pids=$(pgrep -f "termux.x11")
  out "$A Killing Termux ${purple}X11${green} processes..."
  log_data "[+] Killing Termux X11 processes..."
  if [[ -z "$pids" ]]; then
    out "$D No Termux ${purple}X11${green} processes found."
    log_data "[✔] No Termux X11 processes found."
  else
    if kill -9 $pids >/dev/null 2>&1; then
      out "$D Termux ${purple}X11${green} processes stopped."
      log_data "[✔] Termux X11 processes stopped."
    else
      out -e "Failed to stop Termux ${purple}X11${green} processes."
      log_data "[✖] Error: Failed to stop Termux X11 processes."
      exit 1
    fi
  fi
}

# Enable PulseAudio over Network
pulseaudio_() {
  out "$A Starting PulseAudio..."
  log_data "[+] Starting PulseAudio..."
  if pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=$PULSE_SERVER auth
-anonymous=1" --exit-idle-time=-1 >/dev/null 2>&1; then
    out "$D PulseAudio started successfully."
    log_data "[✔] PulseAudio started successfully."
  else
    out -e "Failed to start PulseAudio."
    log_data "[✖] Error: Failed to start PulseAudio."
    exit 1
  fi
}

# Prepare termux-x11 session
x11Session() {
  export XDG_RUNTIME_DIR=${TMPDIR}
  log_data "[+] Preparing Termux-X11 session..."
  out "$A Preparing Termux${purple}-X11${green} session..."
  if nohup termux-x11 "$DISPLAY" >/dev/null 2>&1 & then
    out "$D Termux${purple}-X11${green} session prepared."
    log_data "[✔] Termux-X11 session prepared."
    sleep "$PTIME"  # Wait a bit until termux-x11 gets started.
  else
    out -e "Failed to prepare Termux${purple}-X11${green} session."
    log_data "[✖] Error: Failed to prepare Termux-X11 session."
    exit 1
  fi
}

# Launch Termux X11 main activity
launch_activity() {
  log_data "[+] Launching Termux X11 main activity..."
  out "$A Launching Termux ${purple}X11${green} main activity..."
  if ! am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity >/dev/null 2>&1; then
    out -e "Failed to launch Termux ${purple}X11${green} main activity."
    log_data "[✖] Error: Failed to launch Termux X11 main activity."
    exit 1
  else
    out "$D Termux ${purple}X11${green} main activity launched."
    log_data "[✔] Termux X11 main activity launched."
    sleep 1
  fi
  sleep 1
}

# Run XFCE4 Desktop
desktop() {
  # Set audio server
  export PULSE_SERVER="$PULSE_SERVER"
  out "$A Starting ${purple}XFCE4${green} Desktop..."
  log_data "[+] Starting XFCE4 Desktop..."
  if env DISPLAY="$DISPLAY" dbus-launch --exit-with-session xfce4-session >/dev/null 2>&1 & then
    out "$D ${purple}XFCE4${green} Desktop started successfully."
    log_data "[✔] XFCE4 Desktop started successfully."
  else
    out -e "Failed to start ${purple}XFCE4${green} Desktop."
    log_data "[✖] Error: Failed to start XFCE4 Desktop."
    exit 1
  fi
}

main() {
  kill_processes
  pulseaudio_
  x11Session
  launch_activity
  desktop
  out "$D ${purple}XFCE4${green} Desktop started successfully."
  exit 0
}

main
