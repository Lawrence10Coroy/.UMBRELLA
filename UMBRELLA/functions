#!/usr/bin/env bash
#Useful functions for customization of the Umbrella
source "${HOME}/.UMBRELLA/UMBRELLA/variables" || { echo -en "\033[31mError:\033[33m File 'variables' is required but not exist!.\033[0m\n" ; exit 1; }

log() {
  local argv="$2"
  case "$1" in
    -a)
      echo -e "$A ${blue}$argv${default}"
      log_data "[+] $argv"
      ;;
    -d)
      echo -e "$D ${blue}$argv${default}"
      log_data "[✔] $argv"
      ;;
    *)
      echo -e "${blue}$1${default}"
      ;;
  esac
}
export -f log

error() {
  local argv="$1"

  if [[ "$argv" == "-l" ]]; then
    log "$E ${orange}$2${default}"
    log_data "[✖] Error: $2"
    return 0
  else
    log "$E ${orange}$argv${default}"
    return
  fi
}
export -f error

log_data() {
  if [ ! -f "$LOGFILE" ]; then touch "$LOGFILE"; fi
  local message="$1"
  echo "[ $(date '+%Y-%m-%d %H:%M:%S') ] : $message" >> "$LOGFILE"
}
export -f log_data

check_file() {
  local files=("$@")
  for file in "${files[@]}"; do
    if [ ! -f "$file" ]; then
      error -l "File '$file' is required but not exist!."
      exit 1;
    fi
  done
}
export -f check_file

info() {
  echo -en "${yellow}For more help type ${green}UMBRELLA${yellow} [${red} -h${yellow} |${red} --help${yellow} ] for helpper UMBRELLA CORPORATION.${default}\n"
}
export -f info

theme() {
  local files=("${BANNER}/dark" "${BANNER}/cyan" "${BANNER}/red")
  local argv="$1"
  check_file "$files"
  declare -A color=(
  ["dark"]="${BANNER}/dark"
  ["red"]="${BANNER}/red"
  ["cyan"]="${BANNER}/cyan"
)
  bash "${color[$argv]}"
  sleep 0.5;
}
export -f theme

update_system() {
  log -a "Update system ... "
  if ! apt update && apt upgrade -y 2>&1; then
    error -l "The dependencies could not be updated!."
  fi
}
export -f update_system

check_dependencies() {
  local argv=("$@")
  for dep in "${argv[@]}"; do
    if ! command -v "$dep" &>/dev/null; then
      error -l "'$dep' is required but not installed."
      exit 1;
    fi
  done
}
export -f check_dependencies

install_dependencies() {
  local dependencies=("$@")

  for dep in "${dependencies[@]}"; do
    if command -v "$dep" &>/dev/null; then
      log -d "$dep Already is installed!."
    else
      log -a "Installing dependencies $dep...  "
      if ! pkg install -y "$dep"; then
        error "Could not be installed '$dep'."
      fi
      log -d "$dep Installed Successfully!."
    fi
  done
}
export -f install_dependencies

helpper() {
  printf "${yellow}☣ U M B R E L L A ☣ C O R P O R A T I O N ☣ ${version} (c) by LAWRENCE •‣ It is a custom configuration tool that makes it simple to perform basic tasks. At Umbrella Corporation we believe that nothing is impossible. If you can imagine it, you can create it!. The following is the help menu that provides you with the available tools that you can use to make using our tool easier.\nSyntax: COMMANDS [-args-] [-descriptions-]\n 

\n✲ THIS COMMANDS THERE FOR PERSONALITYON TO UMBRELLA CORPORATION ✲
	       ✲ Settings Opctions ✲
   COMMANDS    ∵   ARGUMENTS    ∵   DESCRIPTION

  ❉ ${green}UMBRELLA${yellow}     ┄┄┄┄┄┅┅┅┅┅┅┆ ${red}-h  ${yellow}| ${red}--help${yellow} ┆┅┅┅┅┅┄┄┄┄┇ Help from UMBRELLA CORPORATION.
  ❉ ${green}adduser${yellow}     ┄┄┄┄┄┄┅┅┅┅┅┅┆ ${red}-n  ${yellow}| ${red}--new${yellow}  ┆┅┅┅┅┅┄┄┄┄┇ Add a username.
                            ┆${red}-r ${yellow}| ${red}--remove${yellow} ┆┅┅┅┅┅┄┄┄┄┇ Remove your username.
  ❉ ${green}check-data${yellow}   ┄┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Show the processes and data made of changes or customization of UMBRELLA CORPORATION.
                            ┆ ${red}-h${yellow}--| ${red}--help${yellow} ┆┅┅┅┅┅┄┄┄┄┇ Menu help check-logs.
  ❉ ${green}password${yellow}     ┄┄┄┄┄┅┅┅┅┅┅┆ ${red}-n  ${yellow}| ${red}--new  ${yellow}┆┅┅┅┅┅┄┄┄┄┇ Add/get a password to log in to login UMBRELLA.
                            ┆  ${red}passwd set${yellow}  ┆┅┅┅┅┅┄┄┄┄┇ Set mode enable/password in login.
  ❉ ${green}theme${yellow}        ┄┄┄┄┄┅┅┅┅┅┅┆ ${red}-c ${yellow}| ${red}--color${yellow} ┆┅┅┅┅┅┄┄┄┄┇ Set a banner color that providedUMBRELLA CORPORATION. Available colors: cyan, red and dark.
                            ┆ ${red}-s${yellow}  | ${red}--set${yellow}  ┆┅┅┅┅┅┄┄┄┄┇ Set mode enable/disable or costum, for the UMBRELLA wall banner.
  ❉ ${green}tools${yellow}        ┄┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Tools that Umbrella Corporation can provide you.
                            ┆ ${red}-h${yellow}  | ${red}--help${yellow} ┆┅┅┅┅┅┄┄┄┄┇ For more help of tools.
  ❉ ${green}version${yellow}      ┄┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Show version UMBRELLA installed.

  \n✲ THIS COMMANDS THERE FUNCTIONS TO UMBRELLA CORPORATION ✲
                 ✲ Commands ✲
      COMMANDS                ∵                DESCRIPTION
  ❉ ${green}archivos${yellow}      ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ File management of your Android.
  ❉ ${green}apkinf${yellow}        ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Provides information on phone applications.
  ❉ ${green}df${yellow}            ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ It is a tool that shows information about the available and total space in a file system.
  ❉ ${green}distro${yellow}       ┄┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Utility that allows you to run a Linux distribution on an Android device without requiring root access.
  ❉ ${green}fzf-lovely${yellow}    ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ It is a flexible tool that allows you to search for files, navigate processes, complete routes automatically.
  ❉ ${green}lock${yellow}          ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇  Block termux.
  ❉ ${green}localhost${yellow}     ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Show your public internet protocol.
  ❉ ${green}p10k  ${yellow}        ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ To access the settings of Powerlevel10k is a theme for Zsh.
  ❉ ${green}pkg2install${yellow}   ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ About packages provided by UMBRELLA CORPORATION.
  ❉ ${green}tree${yellow}          ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ File Map/Map Display.
  ❉ ${green}tldr${yellow}          ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Command Manual/Command Usage.
  ❉ ${green}traductor${yellow}     ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Init a command line traductor.
  ❉ ${green}x11-distro${yellow}    ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ Utility that lets you run your Linux distribution in a desktop environment.
  ❉ ${green}x11-native${yellow}    ┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇ It is a tool that allows you to run a Linux environment on an Android device.
  ┇┄┄┄┄┄┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┄┄┄┄┇${default}\n\n"
}
export -f helpper

pass () {
  files=("${libexec}/UMBRELLA.login" "${UMBRELLA}/passwd")
  local argv="$1"
  case "$argv" in
    Set)
      check_file "${files[@]}"
      login=$(grep "pass" ${libexec}/UMBRELLA.login | tail -n 1)
      select opt in Password Disable Exit Fingerprint; do
        case "$opt" in
          Exit) exit 0 ;;
          Password)
            opt="Get"
            sed -i "s|$login|pass $opt|" $libexec/UMBRELLA.login
            log "$D ${blue}Enable password sucessfully!"
            break ;;
          Disable)
            opt=""
            sed -i "s|$login|pass $opt|" $libexec/UMBRELLA.login
            log "$D ${blue}Disable password sucessfully!"
            break ;;
          Fingerprint)
            opt="fingerprint"
            sed -i "s|$login|pass $opt|" $libexec/UMBRELLA.login
            log "$D ${blue}Settings fingerprint successfully"
            break ;;
          *)
            error "No valid option!. Try again."
            ;;
        esac
      done
      ;;
    New)
      while read -sp "New password: " pass && printf "\n" && [[ -z $pass ]]; do
        error "Input cannot be empty. Please try again."
        continue
      done
      while read -sp "Retype new password: " pass2 && printf "\n" && [[ -z $pass2 ]]
      do
        error "Input cannot be empty. Please try again."
        continue
      done
      if [[ $pass = $pass2 ]]; then
        local fpasswd=$(grep "PASSWORD" ${UMBRELLA}/passwd|tail -n 1)
        local encrypted=$(echo $pass|openssl enc -aes-256-cbc -md sha512 -a -pbkdf2 -iter 100000 -salt -pass pass:dynamic_key)
        sed -i "s|$fpasswd|PASSWORD : $encrypted|" ${UMBRELLA}/passwd

        log "$D ${blue}Password saved successfully!.\n"
      else
        error "Password do noy match."
        pass New
      fi
      log -d "Add new password"
      ;;
    Get)
      check_file "${files[@]}"
      local passwd=$(grep "PASSWORD" ${UMBRELLA}/passwd | tail -n 1)
      if [[ -z "$passwd" ]]; then
        echo "PASSWORD" >> ${UMBRELLA}/passwd
      fi
      local passwd=$(grep "PASSWORD" ${UMBRELLA}/passwd | tail -n 1)
      local encrypted_pass=$(echo "$passwd" | awk '{print $3}')
      if [[ -z "$encrypted_pass" ]]; then
        error "Encrypted password is empty, defining default password!."
        log "$D ${blue}Password saved successfully\n"
        local pass_default=$(echo "UMBRELLA"|openssl enc -aes-256-cbc -md sha512 -a -pbkdf2 -iter 100000 -salt -pass pass:dynamic_key)
        sed -i "s|$passwd|PASSWORD : $pass_default|" ${UMBRELLA}/passwd
      fi
      local passwd=$(grep "PASSWORD" ${UMBRELLA}/passwd | tail -n 1)
      local encrypted_pass=$(echo "$passwd" | awk '{print $NF}')
      decrypted_pass=$(echo "$encrypted_pass" | openssl enc -aes-256-cbc -md sha512 -a -d -pbkdf2 -iter 100000 -salt -pass pass:dynamic_key 2>/dev/null)
      if [[ $? -ne 0 ]]; then
        error "Failed to decrypt the password. Check the encryption format or key."
        return 1
      fi

      max_attempts=3
      attempt=0

      while read -sp "Password: " pass && [[ -z "$pass" ]]; do
        error "Input password!.\n"
        continue
      done
      until [[ "$pass" = "$decrypted_pass" ]] && printf "\n"; do
        attempt=$((attempt + 1))
        if [[ $attempt -ge $max_attempts ]]; then
          error "Maximum attempts reached. Exiting."
          error "Failed to input correct password after $max_attempts attempts."
          sleep 2
          pkill com.termux
        fi
        error "Retype the password"
        error "Error to get password (Attempt: $attempt)"
        pass=""
        while read -sp "Password: " pass && [[ -z "$pass" ]]; do
          error "Input password!.\n"
          continue
        done
      done
      log "$D ${blue}Password sucessfully!\nWELCOME TO  U M B R E L L A  C O R P O R A T I O N"
      ;;
    fingerprint)
      local get=$(termux-fingerprint | jq -r '.auth_result' | awk 'NF{print $NF}' FS=RESULT_)

      if [[ $? -ne 0 ]]; then
        error "When detecting the fingerprint sensor!."
        pass Get
        return 0
      else
        until [[ "$get" = "SUCCESS" ]]; do
          if [[ "$get" == "FAILURE" ]] || [[ -z "$get" ]]; then
            error "When detecting fingerprint."
            pass Get
            return 0
          fi
          if [[ "$get" == "UNKNOWN" ]]; then
            error -l "You have no defined fingerprint, go to your settings and define your fingerprint!."
            pass Get
            return 0
          fi
        done
      fi
      log "$D ${blue}Password sucessfully!\nWELCOME TO  U M B R E L L A  C O R P O R A T I O N"
      ;;
  esac
}

export -f pass
